<?xml version="1.0" encoding="UTF-8"?>
<codehawk-java-analyzer>
  <header info="class" time="2020-03-10 13:24:08"/>
  <class abstract="yes" name="FileChannel" package="java.nio.channels">
    <superclass>java.nio.channels.spi.AbstractInterruptibleChannel</superclass>
    <interfaces>
      <implements>java.nio.channels.SeekableByteChannel</implements>
      <implements>java.nio.channels.GatheringByteChannel</implements>
      <implements>java.nio.channels.ScatteringByteChannel</implements>
      <implements>java.nio.channels.Channel</implements>
      <implements>java.nio.channels.InterruptibleChannel</implements>
      <implements>java.io.Closeable</implements>
      <implements>java.nio.channels.ByteChannel</implements>
      <implements>java.nio.channels.WritableByteChannel</implements>
      <implements>java.nio.channels.ReadableByteChannel</implements>
    </interfaces>
    <!-- =============================== FIELDS ===============================  -->
    <fields/>
    <!-- ============================ CONSTRUCTORS ============================  -->
    <constructors>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ () -->
      <constructor access="protected">
        <signature/>
        <exceptions/>
        <summary>
          <taint>
            <defput>
              <this/>
            </defput>
          </taint>
        </summary>
      </constructor>
    </constructors>
    <!-- ============================== METHODS ==============================  -->
    <methods>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ force -->
      <method abstract="yes" access="public" name="force" valid="no">
        <signature>
          <arg nr="1">
            <boolean/>
          </arg>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ lock -->
      <method abstract="yes" access="public" name="lock" valid="no">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <boolean/>
          </arg>
          <return>
            <object>java.nio.channels.FileLock</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ lock -->
      <method access="public" final="yes" name="lock">
        <signature>
          <return>
            <object>java.nio.channels.FileLock</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.AsynchronousCloseException</throws>
          <throws>java.nio.channels.FileLockInterruptionException</throws>
          <throws>java.nio.channels.OverlappingFileLockException</throws>
          <throws>java.nio.channels.NonWritableChannelException</throws>
        </exceptions>
        <summary>
          <taint/>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ map -->
      <method abstract="yes" access="public" name="map">
        <signature>
          <arg nr="1">
            <object>java.nio.channels.FileChannel$MapMode</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <return>
            <object>java.nio.MappedByteBuffer</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ open -->
      <method access="public" name="open" static="yes">
        <signature>
          <arg nr="1">
            <object>java.nio.file.Path</object>
          </arg>
          <arg nr="2">
            <object>java.util.Set</object>
          </arg>
          <arg nr="3">
            <array>
              <object>java.nio.file.attribute.FileAttribute</object>
            </array>
          </arg>
          <return>
            <object>java.nio.channels.FileChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.lang.IllegalArgumentException</throws>
          <throws>java.lang.UnsupportedOperationException</throws>
          <throws>java.lang.SecurityException</throws>
        </exceptions>
        <summary>
          <taint>
            <defput>
              <return/>
            </defput>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ open -->
      <method access="public" name="open" static="yes">
        <signature>
          <arg nr="1">
            <object>java.nio.file.Path</object>
          </arg>
          <arg nr="2">
            <array>
              <object>java.nio.file.OpenOption</object>
            </array>
          </arg>
          <return>
            <object>java.nio.channels.FileChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.lang.IllegalArgumentException</throws>
          <throws>java.lang.UnsupportedOperationException</throws>
          <throws>java.lang.SecurityException</throws>
        </exceptions>
        <summary>
          <taint>
            <defput>
              <return/>
            </defput>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ position -->
      <method abstract="yes" access="public" name="position">
        <signature>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ position -->
      <method abstract="yes" access="public" name="position">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <return>
            <object>java.nio.channels.FileChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.io.IOException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
            <transfer>
              <return/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <eq/>
                  <this/>
                  <return/>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ position -->
      <method access="public" bridge="yes" name="position">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <return>
            <object>java.nio.channels.SeekableByteChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.io.IOException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <return/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <eq/>
                  <return/>
                  <this/>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ read -->
      <method abstract="yes" access="public" name="read">
        <signature>
          <arg nr="1">
            <object>java.nio.ByteBuffer</object>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.AsynchronousCloseException</throws>
          <throws>java.nio.channels.ClosedByInterruptException</throws>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint>
            <defput>
              <arg nr="1"/>
            </defput>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
            <error-post>
              <math>
                <apply>
                  <eq/>
                  <return/>
                  <cn>-1</cn>
                </apply>
              </math>
            </error-post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ read -->
      <method abstract="yes" access="public" name="read" valid="no">
        <signature>
          <arg nr="1">
            <array>
              <object>java.nio.ByteBuffer</object>
            </array>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <int/>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ read -->
      <method access="public" final="yes" name="read">
        <signature>
          <arg nr="1">
            <array>
              <object>java.nio.ByteBuffer</object>
            </array>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.AsynchronousCloseException</throws>
          <throws>java.nio.channels.ClosedByInterruptException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <defput>
              <arg nr="1"/>
            </defput>
            <defput>
              <return/>
            </defput>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
            <error-post>
              <math>
                <apply>
                  <eq/>
                  <return/>
                  <cn>-1</cn>
                </apply>
              </math>
            </error-post>
          </postconditions>
          <side-effects>
            <side-effect>
              <math>
                <apply>
                  <numeric-abstract/>
                  <arg nr="1"/>
                </apply>
              </math>
            </side-effect>
          </side-effects>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ read -->
      <method abstract="yes" access="public" name="read" valid="no">
        <signature>
          <arg nr="1">
            <object>java.nio.ByteBuffer</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ size -->
      <method abstract="yes" access="public" name="size">
        <signature>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ transferFrom -->
      <method abstract="yes" access="public" name="transferFrom" valid="no">
        <signature>
          <arg nr="1">
            <object>java.nio.channels.ReadableByteChannel</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ transferTo -->
      <method abstract="yes" access="public" name="transferTo" valid="no">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <object>java.nio.channels.WritableByteChannel</object>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ truncate -->
      <method abstract="yes" access="public" name="truncate" valid="no">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <return>
            <object>java.nio.channels.FileChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ truncate -->
      <method access="public" bridge="yes" name="truncate">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <return>
            <object>java.nio.channels.SeekableByteChannel</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.nio.channels.NonWritableChannelException</throws>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <return/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <eq/>
                  <return/>
                  <this/>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ tryLock -->
      <method abstract="yes" access="public" name="tryLock" valid="no">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <boolean/>
          </arg>
          <return>
            <object>java.nio.channels.FileLock</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ tryLock -->
      <method access="public" final="yes" name="tryLock">
        <signature>
          <return>
            <object>java.nio.channels.FileLock</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.OverlappingFileLockException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
            <error-post>
              <math>
                <null/>
              </math>
            </error-post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ write -->
      <method abstract="yes" access="public" name="write">
        <signature>
          <arg nr="1">
            <object>java.nio.ByteBuffer</object>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.AsynchronousCloseException</throws>
          <throws>java.nio.channels.ClosedByInterruptException</throws>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
          <postconditions>
            <post name="bytes written">
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ write -->
      <method abstract="yes" access="public" name="write" valid="no">
        <signature>
          <arg nr="1">
            <array>
              <object>java.nio.ByteBuffer</object>
            </array>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <int/>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ write -->
      <method access="public" final="yes" name="write">
        <signature>
          <arg nr="1">
            <array>
              <object>java.nio.ByteBuffer</object>
            </array>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
          <throws>java.nio.channels.ClosedChannelException</throws>
          <throws>java.nio.channels.AsynchronousCloseException</throws>
          <throws>java.nio.channels.ClosedByInterruptException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ write -->
      <method abstract="yes" access="public" name="write" valid="no">
        <signature>
          <arg nr="1">
            <object>java.nio.ByteBuffer</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions>
          <throws>java.io.IOException</throws>
        </exceptions>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) begin -->
      <method from="java.nio.channels.spi.AbstractInterruptibleChannel" inherited="yes" name="begin">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) clone -->
      <method from="java.lang.Object" inherited="yes" name="clone">
        <signature>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) close -->
      <method from="java.nio.channels.spi.AbstractInterruptibleChannel" inherited="yes" name="close">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) end -->
      <method from="java.nio.channels.spi.AbstractInterruptibleChannel" inherited="yes" name="end">
        <signature>
          <arg nr="1">
            <boolean/>
          </arg>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) equals -->
      <method from="java.lang.Object" inherited="yes" name="equals">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) finalize -->
      <method from="java.lang.Object" inherited="yes" name="finalize">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) getClass -->
      <method from="java.lang.Object" inherited="yes" name="getClass">
        <signature>
          <return>
            <object>java.lang.Class</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) hashCode -->
      <method from="java.lang.Object" inherited="yes" name="hashCode">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) implCloseChannel -->
      <method from="java.nio.channels.spi.AbstractInterruptibleChannel" inherited="yes" name="implCloseChannel">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) isOpen -->
      <method from="java.nio.channels.spi.AbstractInterruptibleChannel" inherited="yes" name="isOpen">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) notify -->
      <method from="java.lang.Object" inherited="yes" name="notify">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) notifyAll -->
      <method from="java.lang.Object" inherited="yes" name="notifyAll">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) toString -->
      <method from="java.lang.Object" inherited="yes" name="toString">
        <signature>
          <return>
            <object>java.lang.String</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
        </signature>
      </method>
    </methods>
  </class>
  <copyright-notice>Copyright 2012-2020, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-java-analyzer>
