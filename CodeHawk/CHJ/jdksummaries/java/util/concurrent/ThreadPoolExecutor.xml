<?xml version="1.0" encoding="UTF-8"?>
<codehawk-java-analyzer>
  <header info="class" time="2020-03-17 23:22:01"/>
  <class name="ThreadPoolExecutor" package="java.util.concurrent">
    <superclass>java.util.concurrent.AbstractExecutorService</superclass>
    <interfaces>
      <implements>java.util.concurrent.ExecutorService</implements>
      <implements>java.util.concurrent.Executor</implements>
    </interfaces>
    <!-- =============================== FIELDS ===============================  -->
    <fields/>
    <!-- ============================ CONSTRUCTORS ============================  -->
    <constructors>
      <!--  (int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <arg nr="4">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <arg nr="5">
            <object>java.util.concurrent.BlockingQueue</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="3"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <cn>1</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <arg nr="1"/>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="4"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="5"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="3" form="waiting-time" type="resource"/>
            <sink arg="2" form="threads" type="resource"/>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </constructor>
      <!--  (int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <arg nr="4">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <arg nr="5">
            <object>java.util.concurrent.BlockingQueue</object>
          </arg>
          <arg nr="6">
            <object>java.util.concurrent.ThreadFactory</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.IllegalArgumentException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="4"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="5"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="6"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="3" form="waiting-time" type="resource"/>
            <sink arg="2" form="threads" type="resource"/>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </constructor>
      <!--  (int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <arg nr="4">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <arg nr="5">
            <object>java.util.concurrent.BlockingQueue</object>
          </arg>
          <arg nr="6">
            <object>java.util.concurrent.RejectedExecutionHandler</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
          <throws>java.lang.NullPointerException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="3"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <cn>1</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <arg nr="1"/>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="4"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="5"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="6"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="3" form="waiting-time" type="resource"/>
            <sink arg="2" form="threads" type="resource"/>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </constructor>
      <!--  (int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
          <arg nr="3">
            <long/>
          </arg>
          <arg nr="4">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <arg nr="5">
            <object>java.util.concurrent.BlockingQueue</object>
          </arg>
          <arg nr="6">
            <object>java.util.concurrent.ThreadFactory</object>
          </arg>
          <arg nr="7">
            <object>java.util.concurrent.RejectedExecutionHandler</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
          <throws>java.lang.NullPointerException</throws>
          <throws>java.lang.NullPointerException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="1"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="3"/>
                  <cn>0</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <cn>1</cn>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <geq/>
                  <arg nr="2"/>
                  <arg nr="1"/>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.IllegalArgumentException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="4"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="5"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="6"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="7"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="3" form="waiting-time" type="resource"/>
            <sink arg="2" form="threads" type="resource"/>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </constructor>
    </constructors>
    <!-- ============================== METHODS ==============================  -->
    <methods>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ afterExecute -->
      <method access="protected" name="afterExecute">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Throwable</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ allowCoreThreadTimeOut -->
      <method access="public" name="allowCoreThreadTimeOut" valid="no">
        <signature>
          <arg nr="1">
            <boolean/>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ allowsCoreThreadTimeOut -->
      <method access="public" name="allowsCoreThreadTimeOut" valid="no">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ awaitTermination -->
      <method access="public" name="awaitTermination">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.InterruptedException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="1" form="waiting-time" type="resource"/>
          </sinks>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ beforeExecute -->
      <method access="protected" name="beforeExecute">
        <signature>
          <arg nr="1">
            <object>java.lang.Thread</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Runnable</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ execute -->
      <method access="public" name="execute">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
          <throws>java.util.concurrent.RejectedExecutionException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ finalize -->
      <method access="protected" name="finalize" valid="no">
        <signature/>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getActiveCount -->
      <method access="public" name="getActiveCount">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getCompletedTaskCount -->
      <method access="public" name="getCompletedTaskCount" valid="no">
        <signature>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getCorePoolSize -->
      <method access="public" name="getCorePoolSize">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getKeepAliveTime -->
      <method access="public" name="getKeepAliveTime">
        <signature>
          <arg nr="1">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getLargestPoolSize -->
      <method access="public" name="getLargestPoolSize" valid="no">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getMaximumPoolSize -->
      <method access="public" name="getMaximumPoolSize">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getPoolSize -->
      <method access="public" name="getPoolSize">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <geq/>
                  <return/>
                  <cn>0</cn>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getQueue -->
      <method access="public" name="getQueue">
        <signature>
          <return>
            <object>java.util.concurrent.BlockingQueue</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getRejectedExecutionHandler -->
      <method access="public" name="getRejectedExecutionHandler">
        <signature>
          <return>
            <object>java.util.concurrent.RejectedExecutionHandler</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getTaskCount -->
      <method access="public" name="getTaskCount" valid="no">
        <signature>
          <return>
            <long/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getThreadFactory -->
      <method access="public" name="getThreadFactory">
        <signature>
          <return>
            <object>java.util.concurrent.ThreadFactory</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isShutdown -->
      <method access="public" name="isShutdown">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isTerminated -->
      <method access="public" name="isTerminated">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isTerminating -->
      <method access="public" name="isTerminating" valid="no">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ prestartAllCoreThreads -->
      <method access="public" name="prestartAllCoreThreads" valid="no">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ prestartCoreThread -->
      <method access="public" name="prestartCoreThread" valid="no">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ purge -->
      <method access="public" name="purge" valid="no">
        <signature/>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ remove -->
      <method access="public" name="remove">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <this/>
              <arg nr="1"/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ setCorePoolSize -->
      <method access="public" name="setCorePoolSize">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.IllegalArgumentException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ setKeepAliveTime -->
      <method access="public" name="setKeepAliveTime" valid="no">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ setMaximumPoolSize -->
      <method access="public" name="setMaximumPoolSize">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.IllegalArgumentException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
          <sinks>
            <sink arg="1" form="threads" type="resource"/>
          </sinks>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ setRejectedExecutionHandler -->
      <method access="public" name="setRejectedExecutionHandler" valid="no">
        <signature>
          <arg nr="1">
            <object>java.util.concurrent.RejectedExecutionHandler</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ setThreadFactory -->
      <method access="public" name="setThreadFactory">
        <signature>
          <arg nr="1">
            <object>java.util.concurrent.ThreadFactory</object>
          </arg>
        </signature>
        <exceptions>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shutdown -->
      <method access="public" name="shutdown">
        <signature/>
        <exceptions>
          <throws>java.lang.SecurityException</throws>
        </exceptions>
        <summary>
          <taint>
            <remove>
              <this/>
            </remove>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ shutdownNow -->
      <method access="public" name="shutdownNow">
        <signature>
          <return>
            <object>java.util.List</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.SecurityException</throws>
          <throws>java.lang.RuntimePermission</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ terminated -->
      <method access="protected" name="terminated">
        <signature/>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ toString -->
      <method access="public" name="toString">
        <signature>
          <return>
            <object>java.lang.String</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) clone -->
      <method from="java.lang.Object" inherited="yes" name="clone">
        <signature>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) equals -->
      <method from="java.lang.Object" inherited="yes" name="equals">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) getClass -->
      <method from="java.lang.Object" inherited="yes" name="getClass">
        <signature>
          <return>
            <object>java.lang.Class</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) hashCode -->
      <method from="java.lang.Object" inherited="yes" name="hashCode">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) invokeAll -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="invokeAll">
        <signature>
          <arg nr="1">
            <object>java.util.Collection</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <return>
            <object>java.util.List</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) invokeAll -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="invokeAll">
        <signature>
          <arg nr="1">
            <object>java.util.Collection</object>
          </arg>
          <return>
            <object>java.util.List</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) invokeAny -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="invokeAny">
        <signature>
          <arg nr="1">
            <object>java.util.Collection</object>
          </arg>
          <arg nr="2">
            <long/>
          </arg>
          <arg nr="3">
            <object>java.util.concurrent.TimeUnit</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) invokeAny -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="invokeAny">
        <signature>
          <arg nr="1">
            <object>java.util.Collection</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) newTaskFor -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="newTaskFor">
        <signature>
          <arg nr="1">
            <object>java.util.concurrent.Callable</object>
          </arg>
          <return>
            <object>java.util.concurrent.RunnableFuture</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) newTaskFor -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="newTaskFor">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.util.concurrent.RunnableFuture</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) notify -->
      <method from="java.lang.Object" inherited="yes" name="notify">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) notifyAll -->
      <method from="java.lang.Object" inherited="yes" name="notifyAll">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) submit -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="submit">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.util.concurrent.Future</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) submit -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="submit">
        <signature>
          <arg nr="1">
            <object>java.lang.Runnable</object>
          </arg>
          <return>
            <object>java.util.concurrent.Future</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) submit -->
      <method from="java.util.concurrent.AbstractExecutorService" inherited="yes" name="submit">
        <signature>
          <arg nr="1">
            <object>java.util.concurrent.Callable</object>
          </arg>
          <return>
            <object>java.util.concurrent.Future</object>
          </return>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
        </signature>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (inherited) wait -->
      <method from="java.lang.Object" inherited="yes" name="wait">
        <signature>
          <arg nr="1">
            <long/>
          </arg>
        </signature>
      </method>
    </methods>
  </class>
  <copyright-notice>Copyright 2012-2020, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-java-analyzer>
