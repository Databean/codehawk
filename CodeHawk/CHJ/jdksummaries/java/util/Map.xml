<?xml version="1.0" encoding="UTF-8"?>
<codehawk-java-analyzer>
  <header info="interface" time="2020-03-09 18:10:15"/>
  <interface name="Map" package="java.util">
    <superinterfaces/>
    <class-properties>
      <cprop method="size" name="size">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
      </cprop>
    </class-properties>
    <!-- ============================== METHODS ==============================  -->
    <methods>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ clear -->
      <method abstract="yes" access="public" name="clear">
        <signature/>
        <exceptions/>
        <summary>
          <taint/>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ compute -->
      <method access="public" name="compute">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ computeIfAbsent -->
      <method access="public" name="computeIfAbsent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.Function</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ computeIfPresent -->
      <method access="public" name="computeIfPresent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ containsKey -->
      <method abstract="yes" access="public" name="containsKey">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.ClassCastException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ containsValue -->
      <method abstract="yes" access="public" name="containsValue">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.ClassCastException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ entrySet -->
      <method abstract="yes" access="public" name="entrySet">
        <signature>
          <return>
            <object>java.util.Set</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
            <transfer>
              <return/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ equals -->
      <method abstract="yes" access="public" name="equals">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ forEach -->
      <method access="public" name="forEach">
        <signature>
          <arg nr="1">
            <object>java.util.function.BiConsumer</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ get -->
      <method abstract="yes" access="public" name="get">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.ClassCastException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
            <transfer>
              <return/>
              <this/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
            <error-post>
              <math>
                <null/>
              </math>
            </error-post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getOrDefault -->
      <method access="public" name="getOrDefault">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ hashCode -->
      <method abstract="yes" access="public" name="hashCode">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isEmpty -->
      <method abstract="yes" access="public" name="isEmpty">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keySet -->
      <method abstract="yes" access="public" name="keySet">
        <signature>
          <return>
            <object>java.util.Set</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <not-null/>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ merge -->
      <method access="public" name="merge">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ put -->
      <method abstract="yes" access="public" name="put">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.UnsupportedOperationException</throws>
          <throws>java.lang.ClassCastException</throws>
          <throws>java.lang.IllegalArgumentException</throws>
          <c-throws>
            <safety-condition>
              <math>
                <apply>
                  <not-null/>
                  <arg nr="1"/>
                </apply>
              </math>
            </safety-condition>
            <safety-condition>
              <math>
                <apply>
                  <not-null/>
                  <arg nr="2"/>
                </apply>
              </math>
            </safety-condition>
            <exn>java.lang.NullPointerException</exn>
          </c-throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <arg nr="1"/>
            </transfer>
            <transfer>
              <this/>
              <arg nr="2"/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <element/>
                  <this/>
                </apply>
              </math>
            </post>
          </postconditions>
          <side-effects>
            <side-effect>
              <math>
                <apply>
                  <numeric-join/>
                  <arg nr="2"/>
                  <this/>
                  <this/>
                </apply>
              </math>
            </side-effect>
          </side-effects>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putAll -->
      <method abstract="yes" access="public" name="putAll">
        <signature>
          <arg nr="1">
            <object>java.util.Map</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putIfAbsent -->
      <method access="public" name="putIfAbsent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <this/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ remove -->
      <method abstract="yes" access="public" name="remove">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions>
          <throws>java.lang.UnsupportedOperationException</throws>
          <throws>java.lang.ClassCastException</throws>
          <throws>java.lang.NullPointerException</throws>
        </exceptions>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
          <postconditions>
            <post>
              <math>
                <apply>
                  <element/>
                  <this/>
                </apply>
              </math>
            </post>
          </postconditions>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ remove -->
      <method access="public" name="remove">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replace -->
      <method access="public" name="replace">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="3"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replace -->
      <method access="public" name="replace">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <return/>
            </transfer>
            <transfer>
              <arg nr="2"/>
              <return/>
            </transfer>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replaceAll -->
      <method access="public" name="replaceAll">
        <signature>
          <arg nr="1">
            <object>java.util.function.BiFunction</object>
          </arg>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <arg nr="1"/>
              <this/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ size -->
      <method abstract="yes" access="public" name="size">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ values -->
      <method abstract="yes" access="public" name="values">
        <signature>
          <return>
            <object>java.util.Collection</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <taint>
            <transfer>
              <this/>
              <return/>
            </transfer>
          </taint>
        </summary>
      </method>
    </methods>
  </interface>
  <copyright-notice>Copyright 2012-2020, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-java-analyzer>
