<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <reference href="http://msdn.microsoft.com/"/>
  <header date="11/16/2015 13:54:31"/>
  <libfun lib="secur32" name="EncryptMessage">
   <documentation>
    <desc>
      encrypts a message to provide privacy. EncryptMessage (General) allows
      an application to choose among cryptographic algorithms supported by 
      the chosen mechanism. The EncryptMessage (General) function uses the 
      security context referenced by the context handle. Some packages do 
      not have messages to be encrypted or decrypted but rather provide an 
      integrity hash that can be checked.
      When using the Digest security support provider (SSP), this function 
      is available as a SASL mechanism only.
      When using the Schannel SSP, this function encrypts messages by using 
      a session key negotiated with the remote party that will receive the 
      message. The encryption algorithm is determined by the cipher suite
      in use.
      Note  EncryptMessage (General) and DecryptMessage (General) can be 
      called at the same time from two different threads in a single 
      Security Support Provider Interface (SSPI) context if one thread is 
      encrypting and the other is decrypting. If more than one thread is 
      encrypting, or more than one thread is decrypting, each thread should
      obtain a unique context.
    </desc>
    <apidoc>
     <pt>
      <ll>SECURITY_STATUS SEC_Entry EncryptMessage(</ll>
      <ld>_In_    PCtxtHandle    phContext</ld>
      <ld>_In_    ULONG          fQOP</ld>
      <ld>_Inout_ PSecBufferDesc pMessage</ld>
      <ld>_In_    ULONG          MessageSeqNo</ld>
      <ll>)</ll>
     </pt>
     <par name="phContext">
       A handle to the security context to be used to encrypt the message
     </par>
     <par name="fQOP">
       Package-specific flags that indicate the quality of protection. A 
       security package can use this parameter to enable the selection of 
       cryptographic algorithms.
       When using the Digest SSP, this parameter must be set to zero.
     </par>
     <par name="pMessage">
       A pointer to a SecBufferDesc structure. On input, the structure references 
       one or more SecBuffer structures. One of these can be of type SECBUFFER_DATA.
       That buffer contains the message to be encrypted. The message is encrypted
       in place, overwriting the original contents of the structure.
       The function does not process buffers with the SECBUFFER_READONLY attribute.
       The length of the SecBuffer structure that contains the message must be 
       no greater than cbMaximumMessage, which is obtained from the 
       QueryContextAttributes (General) (SECPKG_ATTR_STREAM_SIZES) function.
       When using the Digest SSP, there must be a second buffer of type 
       SECBUFFER_PADDING or SEC_BUFFER_DATA to hold signature information. To get
       the size of the output buffer, call the QueryContextAttributes (General) 
       function and specify SECPKG_ATTR_SIZES. The function will return a 
       SecPkgContext_Sizes structure. The size of the output buffer is the sum of
       the values in the cbMaxSignature and cbBlockSize members.
       Applications that do not use SSL must supply a SecBuffer of type
       SECBUFFER_PADDING.
     </par>
     <par name="MessageSeqNo">
       The sequence number that the transport application assigned to the message. 
       If the transport application does not maintain sequence numbers, this 
       parameter must be zero.
       When using the Digest SSP, this parameter must be set to zero. The
       Digest SSP manages sequence numbering internally.
       When using the Schannel SSP, this parameter must be set to zero. The 
       Schannel SSP does not use sequence numbers.
     </par>
     <return>
      <rc cond="success">SEC_E_OK</rc>
      <rc cond="failure">error code</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="16" cc="stdcall" name="EncryptMessage">
    <par loc="stack" desc="context handle" io="r" name="phContext" nr="1">
     <type><ptr>CtxtHandle</ptr></type>
     <pre><deref-read/></pre>
     <roles>
       <role rt="ioc:crypto" rn="handle:security context"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="fQOP" roles="none" nr="2">
     <type>ULONG</type>
    </par>
    <par loc="stack" io="rw" name="pMessage" rep="hex" nr="3">
     <type><ptr>SecBufferDesc</ptr></type>
     <pre><deref-read/></pre>
     <roles>
       <role rt="ioc:memops" rn="src-bytes:plaintext"/>
       <role rt="ioc:memops" rn="dst-bytes:ciphertext"/>
     </roles>
     <sideeffects><block-write/></sideeffects>
    </par>
    <par loc="stack" io="r" name="MessageSeqNo" nr="4">
     <type>ULONG</type>
     <roles>
       <role rt="size:index" rn="message seqno"/>
     </roles>
    </par>
    <returntype>SECURITY_STATUS SEC_Entry</returntype>
   </api>
   <semantics>
    <io-actions>
      <io-action cat="crypto" desc="encrypts a message"/>
    </io-actions>
    <preconditions/>
    <postconditions/>
    <sideeffects/>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
