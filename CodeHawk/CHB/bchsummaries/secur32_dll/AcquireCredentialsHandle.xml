<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <reference href="http://msdn.microsoft.com/"/>
  <header date="11/16/2015 11:30:33"/>
  <libfun lib="secur32" name="AcquireCredentialsHandle">
   <documentation>
    <desc>
      acquires a handle to preexisting credentials of a security principal. 
      This handle is required by the InitializeSecurityContext (General) and 
      AcceptSecurityContext (General) functions. These can be either preexisting 
      credentials, which are established through a system logon that is not 
      described here, or the caller can provide alternative credentials.
    </desc>
    <apidoc>
     <pt>
      <ll>SECURITY_STATUS SEC_Entry AcquireCredentialsHandle(</ll>
      <ld>_In_  SEC_CHAR       *pszPrincipal</ld>
      <ld>_In_  SEC_CHAR       *pszPackage</ld>
      <ld>_In_  ULONG          fCredentialUse</ld>
      <ld>_In_  PLUID          pvLogonID</ld>
      <ld>_In_  PVOID          pAuthData</ld>
      <ld>_In_  SEC_GET_KEY_FN pGetKeyFn</ld>
      <ld>_In_  PVOID          pvGetKeyArgument</ld>
      <ld>_Out_ PCredHandle    phCredential</ld>
      <ld>_Out_ PTimeStamp     ptsExpiry</ld>
      <ll>)</ll>
     </pt>
     <par name="pszPrincipal">
       A pointer to a null-terminated string that specifies the name of the 
       principal whose credentials the handle will reference.
       When using the Digest SSP, this parameter is optional.
       When using the Schannel SSP, this parameter is not used and should be set 
       to NULL.
       Note  If the process that requests the handle does not have access to the 
       credentials, the function returns an error. A null string indicates that
       the process requires a handle to the credentials of the user under whose
       security context it is executing.
     </par>
     <par name="pszPackage">
       A pointer to a null-terminated string that specifies the name of the 
       security package with which these credentials will be used. This is a
       security package name returned in the Name member of a SecPkgInfo 
       structure returned by the EnumerateSecurityPackages function. After a
       context is established, QueryContextAttributes (General) can be called 
       with ulAttribute set to SECPKG_ATTR_PACKAGE_INFO to return information 
       on the security package in use.
       When using the Digest SSP, set this parameter to WDIGEST_SP_NAME.
       When using the Schannel SSP, set this parameter to UNISP_NAME.
     </par>
     <par name="fCredentialUse">
       A flag that indicates how these credentials will be used
     </par>
     <par name="pvLogonID">
       A pointer to a locally unique identifier (LUID) that identifies the user.
       This parameter is provided for file-system processes such as network 
       redirectors. This parameter can be NULL.
       When using the Schannel SSP, this parameter is not used and should be 
       set to NULL.
     </par>
     <par name="pAuthData">
       A pointer to package-specific data. This parameter can be NULL, which 
       indicates that the default credentials for that package must be used. 
       To use supplied credentials, pass a SEC_WINNT_AUTH_IDENTITY structure
       that includes those credentials in this parameter. The RPC run time 
       passes whatever was provided in RpcBindingSetAuthInfo.
       When using the Digest SSP, this parameter is a pointer to a
       SEC_WINNT_AUTH_IDENTITY structure that contains authentication 
       information to use to locate the credentials.
       When using the Schannel SSP, specify an SCHANNEL_CRED structure that 
       indicates the protocol to use and the settings for various customizable
       channel features.
       When using the NTLM or Negotiate packages, the maximum character lengths 
       for user name, password, and domain are 256, 256, and 15, respectively.
     </par>
     <par name="pGetKeyFn">
       This parameter is not used and should be set to NULL.
     </par>
     <par name="pvGetKeyArgument">
       This parameter is not used and should be set to NULL.
     </par>
     <par name="phCredential">
       A pointer to a CredHandle structure to receive the credential handle
     </par>
     <par name="ptsExpiry">
       A pointer to a TimeStamp structure that receives the time at which the 
       returned credentials expire. The value returned in this TimeStamp 
       structure depends on the security package. The security package must
       return this value in local time.
       This parameter is set to a constant maximum time. There is no expiration 
       time for Digest security contexts or credentials or when using the Digest
       SSP.
       When using the Schannel SSP, this parameter is optional. When the credential
       to be used for authentication is a certificate, this parameter receives 
       the expiration time for that certificate. If no certificate was supplied,
       then a maximum time value is returned.
     </par>
     <return>
      <rc cond="success">SEC_E_OK</rc>
      <rc cond="failure">error code</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="36" cc="stdcall" name="AcquireCredentialsHandle">
    <par loc="stack" io="r" name="pszPrincipal" nr="1">
     <type><ptr>SEC_CHAR</ptr></type>
     <pre><deref-read-nt/></pre>
     <roles>
        <role rt="ioc:system" rn="name:security principal"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="pszPackage" nr="2">
     <type><ptr>SEC_CHAR</ptr></type>
     <pre><deref-read-nt/></pre>
     <roles>
        <role rt="ioc:system" rn="name:security package"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="fCredentialUse" roles="none" nr="3">
     <type>ULONG</type>
    </par>
    <par loc="stack" io="r" name="pvLogonID" nr="4">
     <type><ptr>LUID</ptr></type>
     <pre><deref-read-null/></pre>
     <roles>
        <role rt="ioc:system" rn="locally unique logon id"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="pAuthData" rep="hex" nr="5">
     <type><ptr>VOID</ptr></type>
     <pre><deref-read-null/></pre>
     <roles>
        <role rt="ioc:memops" rn="src-bytes:security credentials"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="pGetKeyFn" roles="none" nr="6">
     <type>SEC_GET_KEY_FN</type>
     <roles/>
    </par>
    <par loc="stack" io="r" name="pvGetKeyArgument" roles="none" nr="7">
     <type><ptr>VOID</ptr></type>
     <roles/>
    </par>
    <par loc="stack" io="w" name="phCredential" rep="hex" nr="8">
     <type><ptr>CredHandle</ptr></type>
     <pre><deref-write/></pre>
     <sideeffects><block-write/></sideeffects>
     <roles>
        <role rt="ioc:system" rn="infox:security credentials handle"/>
     </roles>
    </par>
    <par loc="stack" io="w" name="ptsExpiry" rep="hex" roles="none" nr="9">
     <type><ptr>TimeStamp</ptr></type>
     <pre><deref-write/></pre>
     <sideeffects><block-write/></sideeffects>
    </par>
    <returntype>SECURITY_STATUS SEC_Entry</returntype>
   </api>
   <semantics>
    <io-actions>
     <io-action cat="system" 
		desc="acquires a handle to preexisting credentials of a security principal"/>
    </io-actions>
    <preconditions/>
    <postconditions/>
    <sideeffects/>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
