<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <reference href="http://msdn.microsoft.com/"/>
  <header date="11/06/2015 15:16:22"/>
  <libfun lib="shlwapi" name="UrlUnescape">
   <documentation>
    <desc>
      Converts escape sequences back into ordinary characters
    </desc>
    <apidoc>
     <pt>
      <ll>HRESULT UrlUnescape(</ll>
      <ld>_Inout_     PTSTR pszURL</ld>
      <ld>_Out_opt_   PTSTR pszUnescaped</ld>
      <ld>_Inout_opt_ DWORD *pcchUnescaped</ld>
      <ld>            DWORD dwFlags</ld>
      <ll>)</ll>
     </pt>
     <par name="pszURL">
       A pointer to a null-terminated string with the URL. If dwFlags is 
       set to URL_UNESCAPE_INPLACE, the converted string is returned 
       through this parameter
     </par>
     <par name="pszUnescaped">
       A pointer to a buffer that will receive a null-terminated string that 
       contains the unescaped version of pszURL. If URL_UNESCAPE_INPLACE is 
       set in dwFlags, this parameter is ignored
     </par>
     <par name="pcchUnescaped">
       The number of characters in the buffer pointed to by pszUnescaped. On
       entry, the value pcchUnescaped points to is set to the size of the buffer.
       If the function returns a success code, the value that pcchUnescaped 
       points to is set to the number of characters written to that buffer,
       not counting the terminating NULL character. If an E_POINTER error 
       code is returned, the buffer was too small, and the value to which 
       pcchUnescaped points is set to the required number of characters that
       the buffer must be able to contain. If any other errors are returned, 
       the value to which pcchUnescaped points is undefined.
     </par>
     <par name="dwFlags">
       Flags that control which characters are unescaped. It can be a
       combination of the following flags
     </par>
     <return>
      <rc cond="success">S_OK</rc>
      <rc cond="failure">error code</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="16" cc="stdcall" name="UrlUnescape">
    <par loc="stack" name="pszURL" io="r" nr="1">
     <type>PTSTR</type>
     <roles>
       <role rt="ioc:network" rn="url"/>
       <role rt="rep:hex" rn="url"/>
     </roles>
    </par>
    <par loc="stack" name="pszUnescaped" io="w" nr="2">
     <type>PTSTR</type>
     <roles>
       <role rt="ioc:network" rn="url"/>
       <role rt="rep:hex" rn="url"/>
     </roles>
    </par>
    <par loc="stack" name="pcchUnescaped" io="rw" nr="3">
     <type><ptr>DWORD</ptr></type>
     <pre><deref-read-null/></pre>
     <sideeffects><block-write/></sideeffects>
     <roles>
       <role rt="size:buffersize" rn="UrlUnescape"/>
     </roles>
    </par>
    <par loc="stack" name="dwFlags" roles="none" nr="4">
     <type>DWORD</type>
    </par>
    <returntype>HRESULT</returntype>
   </api>
   <semantics>
    <io-actions>
     <io-action cat="network" 
		desc="converts escape characters back to ordinary characters"/>
    </io-actions>
    <preconditions>
      <pre>
	<math>
	  <apply>
	    <deref-write/>
	    <type>TCHAR</type>
	    <ci>pszUnescaped</ci>
	    <apply>
	      <indexsize/>
	      <apply>
		<addressed-value/>
		<ci>pcchUnescaped</ci>
		<cn>0</cn>
	      </apply>
	    </apply>
	  </apply>
	</math>
      </pre>
    </preconditions>
    <postconditions/>
    <sideeffects>
      <sideeffect>
	<math>
	  <apply>
	    <block-write/>
	    <type>TCHAR</type>
	    <ci>pszUnescaped</ci>
	    <apply>
	      <indexsize/>
	      <apply>
		<addressed-value/>
		<ci>pcchUnescaped</ci>
		<cn>0</cn>
	      </apply>
	    </apply>
	  </apply>
	</math>
      </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2015, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
