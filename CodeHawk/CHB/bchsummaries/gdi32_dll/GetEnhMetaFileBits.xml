<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="01/14/2015 03:10:29"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="gdi32" name="GetEnhMetaFileBits">
   <documentation>
    <desc>
      retrieves the contents of the specified enhanced-format metafile 
      and copies them into a buffer.
   </desc>
    <apidoc>
     <pt>
      <ll>UINT GetEnhMetaFileBits(</ll>
      <ld>_In_   HENHMETAFILE hemf </ld>
      <ld>_In_   UINT cbBuffer </ld>
      <ld>_Out_  LPBYTE lpbBuffer </ld>
      <ll>)</ll>
     </pt>
     <return>
      <rc cond="success">notzero</rc>
      <rc cond="failure">zero</rc>
     </return>
     <par name="hemf">A handle to the enhanced metafile.</par>
     <par name="cbBuffer">The size, in bytes, of the buffer to receive the data.</par>
     <par name="lpbBuffer">
       A pointer to a buffer that receives the metafile data. The buffer must 
       be sufficiently large to contain the data. If lpbBuffer is NULL, the 
       function returns the size necessary to hold the data.	
     </par>
    </apidoc>
   </documentation>
   <api adj="12" cc="stdcall" name="GetEnhMetaFileBits">
    <returntype>UINT</returntype>
    <par loc="stack" io="r" name="hemf" nr="1">
     <type>HENHMETAFILE</type>
     <roles>
      <role rt="ioc:filesystem" rn="handle:enhanced metafile" />
     </roles>
      <pre><deref-read/></pre>
    </par>
    <par loc="stack" io="r" name="cbBuffer" nr="2">
     <type>UINT</type>
     <roles>
      <role rt="size:buffersize" rn="GetEnhMetaFileBits" />
     </roles>
    </par>
    <par loc="stack" io="w" name="lpbBuffer" nr="3">
     <type><ptr>BYTE</ptr></type>
     <roles>
      <role rt="ioc:memops" rn="dst-bytes:misc" />
      <role rt="ioc:filesystem" rn="infox:file contents"/>
     </roles>
    </par>
   </api>
   <semantics>
    <io-actions>
       <io-action cat="filesystem"
		  desc="retrieves the contents from an enhanced metafile"/>
    </io-actions>
    <preconditions>
      <pre>
	<math>
	  <apply>
	    <deref-write-null/>
	    <type>byte</type>
	    <ci>lpbBuffer</ci>
	    <ci>cbBuffer</ci>
	  </apply>
	</math>
      </pre>
    </preconditions>
    <postconditions>
     <nonzero-zero/>
    </postconditions>
    <sideeffects>
      <sideeffect>
	<math>
	  <apply>
	    <block-write/>
	    <type>byte</type>
	    <ci>lpbBuffer</ci>
	    <ci>cbBuffer</ci>
	  </apply>
	</math>
      </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
