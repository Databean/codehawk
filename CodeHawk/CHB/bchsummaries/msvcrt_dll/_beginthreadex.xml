<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <reference href="http://msdn.microsoft.com/"/>
  <header date="11/09/2015 22:29:07"/>
  <libfun lib="msvcrt" name="_beginthreadex">
   <documentation>
    <desc>creates a thread</desc>
    <apidoc>
     <pt>
      <ll>uintptr_t _beginthreadex(</ll>
      <ld>void *security</ld>
      <ld>unsigned stack_size</ld>
      <ld>unsigned ( __stdcall *start_address )( void * )</ld>
      <ld>void *arglist</ld>
      <ld>unsigned initflag</ld>
      <ld>unsigned *thrdaddr</ld>
      <ll>)</ll>
     </pt>
     <par name="security">
       Pointer to a SECURITY_ATTRIBUTES structure that determines whether the 
       returned handle can be inherited by child processes. If Security is NULL, 
       the handle cannot be inherited. Must be NULL for Windows 95 applications.
     </par>
     <par name="stack_size">Stack size for a new thread, or 0</par>
     <par name="start_address">
       Start address of a routine that begins execution of a new thread.
       For _beginthread, the calling convention is either __cdecl 
       (for native code) or __clrcall (for managed code); for 
       _beginthreadex, it is either __stdcall (for native code) 
       or __clrcall (for managed code).
     </par>
     <par name="arglist">
       Argument list to be passed to a new thread, or NULL
     </par>
     <par name="initflag">
       Flags that control the initial state of a new thread. Set initflag to 0
       to run immediately, or to CREATE_SUSPENDED to create the thread in a 
       suspended state; use ResumeThread to execute the thread. Set initflag 
       to STACK_SIZE_PARAM_IS_A_RESERVATION flag to use stack_size as the initial 
       reserve size of the stack in bytes; if this flag is not specified, 
       stack_size specifies the commit size.
     </par>
     <par name="thrdaddr">
       Points to a 32-bit variable that receives the thread identifier. If it's
       NULL, it's not used
     </par>
     <return>
      <rc cond="success">a handle to the newly created thread</rc>
      <rc cond="failure">zero</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="0" cc="cdecl" name="_beginthreadex">
    <par loc="stack" io="r" name="security" roles="none" nr="1">
     <type><ptr>SECURITY_ATTRIBUTES</ptr></type>
     <pre><deref-read-null/></pre>
    </par>
    <par loc="stack" io="r" name="stack_size" nr="2">
     <type>UINT</type>
     <roles>
        <role rt="ioc:memops" rn="stack-size"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="start_address" nr="3" rep="hex">
     <type>unknownfunction</type>
     <roles>
        <role rt="ioc:process" rn="callbackf:thread"/>
     </roles>
     <pre><deref-read/><function-pointer/></pre>
    </par>
    <par loc="stack" desc="thread arguments" io="r" name="arglist" nr="4" rep="hex">
     <type><ptr>void</ptr></type>
     <roles>
        <role rt="ioc:process" rn="callbackp:thread"/>
     </roles>
     <pre><deref-read-null/></pre>
    </par>
    <par loc="stack" io="r" name="initflag" nr="5" roles="none">
     <type>UINT</type>
    </par>
    <par loc="stack" io="w" name="thrdaddr" nr="6" rep="hex">
     <type><ptr>UINT</ptr></type>
     <roles>
        <role rt="ioc:process" rn="ref:thread id"/>
     </roles>
     <pre><deref-write-null/></pre>
     <sideeffects><block-write/></sideeffects>
    </par>
    <returntype>UINT_PTR</returntype>
   </api>
   <semantics>
    <io-actions>
     <io-action cat="process" desc="creates a thread"/>
    </io-actions>
    <preconditions/>
    <postconditions>
      <notzero-zero/>
    </postconditions>
    <sideeffects>
      <sideeffect>
	<math>
	  <apply>
	    <starts-thread/>
	    <ci>start_address</ci>
	    <ci>arglist</ci>
	  </apply>
	</math>
      </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
