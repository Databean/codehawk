<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="01/13/2015 03:19:31"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="advapi32" name="RegEnumKeyEx">
   <documentation>
    <desc>
      Enumerates the subkeys of the specified open registry key. The function 
      retrieves information about one subkey each time it is called. 
   </desc>
    <apidoc>
     <pt>
      <ll>LONG WINAPI RegEnumKeyExA(</ll>
      <ld>_In_         HKEY hKey</ld>
      <ld>_In_         DWORD dwIndex</ld>
      <ld>_Out_        LPTSTR lpName</ld>
      <ld>_Inout_      LPDWORD lpcName</ld>
      <ld>_Reserved_   LPDWORD lpReserved</ld>
      <ld>_Inout_      LPTSTR lpClass</ld>
      <ld>_Inout_opt_  LPDWORD lpcClass</ld>
      <ld>_Out_opt_    PFILETIME lpftLastWriteTime</ld>
      <ll>)</ll>
     </pt>
     <return>
      <rc cond="success">ERROR_SUCCESS</rc>
      <rc cond="failure">System Error Code</rc>
     </return>
     <par name="hKey">
       A handle to an open registry key. The key must have been opened with the 
       KEY_ENUMERATE_SUB_KEYS access right. 
     </par>
     <par name="dwIndex">
       The index of the subkey to retrieve. 
       This parameter should be zero for the first call to the RegEnumKeyEx function 
       and then incremented for subsequent calls. 
     </par>
     <par name="lpName">
       A pointer to a buffer that receives the name of the subkey, including the 
       terminating null character. 
       The function copies only the name of the subkey, not the full key hierarchy, 
       to the buffer. 
       If the function fails, no information is copied to this buffer. 
    </par>
     <par name="lpcName">
       A pointer to a variable that specifies the size of the buffer specified 
       by the lpName parameter, in characters. 
       This size should include the terminating null character. 
       If the function succeeds, the variable pointed to by lpcName contains 
       the number of characters stored in the buffer, not including the terminating
       null character.
       To determine the required buffer size, use the RegQueryInfoKey function 
       to determine the size of the largest subkey for the key identified by 
       the hKey parameter.
     </par>
     <par name="lpReserved">This parameter is reserved and must be NULL.</par>
     <par name="lpClass">
       A pointer to a buffer that receives the user-defined class of the enumerated 
       subkey. This parameter can be NULL.
     </par>
     <par name="lpcClass">
       A pointer to a variable that specifies the size of the buffer specified by 
       the lpClass parameter, in characters. 
       The size should include the terminating null character. 
       If the function succeeds, lpcClass contains the number of characters stored
       in the buffer, not including the terminating null character.  This parameter 
       can be NULL only if lpClass is NULL.
    </par>
     <par name="lpftLastWriteTime">
       A pointer to FILETIME structure that receives the time at which the 
       enumerated subkey was last written. This parameter can be NULL. 
    </par>
    </apidoc>
   </documentation>
   <api adj="32" cc="stdcall" name="RegEnumKeyEx">
     <returntype>LONG</returntype>
     <par loc="stack" io="r" name="hKey" nr="1" rep="hex">
       <rep type="enum" name="predefined_registry_key_constants"/>
       <type>HKEY</type>
       <pre>
	 <deref-read/>
	 <enum-value name="predefined_registry_key_constants"/>
       </pre>
       <roles>
         <role rt="ioc:registry" rn="handle:key"/>
      </roles>
    </par>
    <par loc="stack" io="r" name="dwIndex" roles="none"  nr="2">
      <type>DWORD</type>
    </par>
    <par loc="stack" io="w" name="lpName" nr="3" rep="hex">
      <type>LPTSTR</type>
      <roles>
         <role rt="ioc:registry" rn="name:subkey"/>
      </roles>
    </par>
    <par loc="stack" io="rw" name="lpcName" nr="4">
       <type><ptr>DWORD</ptr></type>
       <roles>
          <role rt="size:buffersize" rn="RegEnumKeyEx"/>
       </roles>
     <pre><deref-read/></pre>
     <sideeffects><block-write/></sideeffects>
    </par>
    <par loc="stack" io="r" name="lpReserved" roles="none" nr="5">
      <type><ptr>DWORD</ptr></type>
    </par>
    <par loc="stack" io="rw" name="lpClass" nr="6" rep="hex">
      <type>LPTSTR</type>
      <roles>
         <role rt="ioc:registry" rn="type:key class"/>
      </roles>
    </par>
    <par loc="stack" io="rw" name="lpcClass" nr="7">
       <type><ptr>DWORD</ptr></type>
       <roles>
          <role rt="size:buffersize" rn="RegEnumKeyEx"/>
       </roles>
     <pre><deref-read-null/></pre>
     <sideeffects><block-write/></sideeffects>
    </par>
    <par loc="stack" io="w" name="lpftLastWriteTime" nr="8">
      <type><ptr>FILETIME</ptr></type>
     <pre><deref-read-null/></pre>
     <sideeffects><block-write/></sideeffects>
       <roles>
          <role rt="ioc:memops" rn="dst-struct:FILETIME"/>
       </roles>
    </par>
   </api>
   <semantics>
     <io-actions>
       <io-action cat="registry"
		  desc="enumerates the subkeys of a registry key"/>
     </io-actions>
    <preconditions>
      <pre>
	<math>
	  <apply>
	    <deref-write/>
	    <type>TCHAR</type>
	    <ci>lpName</ci>
	    <apply>
	      <indexsize/>
	      <apply><addressed-value/><ci>lpcName</ci><cn>0</cn></apply>
	    </apply>
	  </apply>
	</math>
      </pre>
      <pre>
	<math>
	  <apply>
	    <deref-write-null/>
	    <type>TCHAR</type>
	    <ci>lpClass</ci>
	    <apply>
	      <indexsize/>
	      <apply><addressed-value/><ci>lpcClass</ci><cn>0</cn></apply>
	    </apply>
	  </apply>
	</math>
      </pre>
    </preconditions>
    <postconditions>
      <enum name="system_error_code_constants"/>
    </postconditions>
    <sideeffects>
      <sideeffect>
	<math>
	  <apply>
	    <block-write/>
	    <type>TCHAR</type>
	    <ci>lpName</ci>
	    <apply>
	      <indexsize/>
	      <apply><addressed-value/><ci>lpcName</ci><cn>0</cn></apply>
	    </apply>
	  </apply>
	</math>
      </sideeffect>
      <sideeffect>
	<math>
	  <apply>
	    <block-write/>
	    <type>TCHAR</type>
	    <ci>lpClass</ci>
	    <apply>
	      <indexsize/>
	      <apply><addressed-value/><ci>lpcClass</ci><cn>0</cn></apply>
	    </apply>
	  </apply>
	</math>
      </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2017, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
