<?xml version="1.0" encoding="UTF-8"?>
<codehawk-binary-analyzer>
  <header info="libfun" name="CreateProcessWithTokenW.xml" time="2016-05-08 21:35:46.684667"/>
  <reference href="http://msdn.microsoft.com"/>
  <libfun lib="advapi32" name="CreateProcessWithTokenW">
    <documentation>
      <desc>
	Creates a new process and its primary thread. The new process
	runs in the security context of the specified token. It can
	optionally load the user profile for the specified user.

	The process that calls CreateProcessWithTokenW must have the
	SE_IMPERSONATE_NAME privilege. If this function fails with
	ERROR_PRIVILEGE_NOT_HELD (1314), use the CreateProcessAsUser
	or CreateProcessWithLogonW function instead. Typically, the
	process that calls CreateProcessAsUser must have the
	SE_INCREASE_QUOTA_NAME privilege and may require the
	SE_ASSIGNPRIMARYTOKEN_NAME privilege if the token is not
	assignable. CreateProcessWithLogonW requires no special
	privileges, but the specified user account must be allowed to
	log on interactively. Generally, it is best to use
	CreateProcessWithLogonW to create a process with alternate
	credentials
      </desc>
      <apidoc>
        <pt>
          <ll>BOOL WINAPI CreateProcessWithTokenW(</ll>
          <ld>_In_        HANDLE                hToken</ld>
          <ld>_In_        DWORD                 dwLogonFlags</ld>
          <ld>_In_opt_    LPCWSTR               lpApplicationName</ld>
          <ld>_Inout_opt_ LPWSTR                lpCommandLine</ld>
          <ld>_In_        DWORD                 dwCreationFlags</ld>
          <ld>_In_opt_    LPVOID                lpEnvironment</ld>
          <ld>_In_opt_    LPCWSTR               lpCurrentDirectory</ld>
          <ld>_In_        LPSTARTUPINFOW        lpStartupInfo</ld>
          <ld>_Out_       LPPROCESS_INFORMATION lpProcessInfo</ld>
          <ll>)</ll>
        </pt>
        <par name="hToken">
	  A handle to the primary token that represents a user. The
	  handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and
	  TOKEN_ASSIGN_PRIMARY access rights. For more information,
	  see Access Rights for Access-Token Objects. The user
	  represented by the token must have read and execute access
	  to the application specified by the lpApplicationName or the
	  lpCommandLine parameter.

	  To get a primary token that represents the specified user,
	  call the LogonUser function. Alternatively, you can call the
	  DuplicateTokenEx function to convert an impersonation token
	  into a primary token. This allows a server application that
	  is impersonating a client to create a process that has the
	  security context of the client.

	  Terminal Services: The process is run in the session
	  specified in the token. By default, this is the same session
	  that called LogonUser. To change the session, use the
	  SetTokenInformation function.
	</par>
        <par name="dwLogonFlags">logon option</par>
        <par name="lpApplicationName">
	  The name of the module to be executed. This module can be a
	  Windows-based application. It can be some other type of
	  module (for example, MS-DOS or OS/2) if the appropriate
	  subsystem is available on the local computer.

	  The string can specify the full path and file name of the
	  module to execute or it can specify a partial name. In the
	  case of a partial name, the function uses the current drive
	  and current directory to complete the specification. The
	  function will not use the search path. This parameter must
	  include the file name extension; no default extension is
	  assumed.

	  The lpApplicationName parameter can be NULL. In that case,
	  the module name must be the first white space-delimited
	  token in the lpCommandLine string. If you are using a long
	  file name that contains a space, use quoted strings to
	  indicate where the file name ends and the arguments begin;
	  otherwise, the file name is ambiguous. For example, consider
	  the string "c:\program files\sub dir\program name". This
	  string can be interpreted in a number of ways. The system
	  tries to interpret the possibilities in the following order:

	  c:\program.exe files\sub dir\program name
	  c:\program files\sub.exe dir\program name
	  c:\program files\sub dir\program.exe name
	  c:\program files\sub dir\program name.exe

	  If the executable module is a 16-bit application,
	  lpApplicationName should be NULL, and the string pointed to
	  by lpCommandLine should specify the executable module as
	  well as its arguments.
	</par>
        <par name="lpCommandLine">
	  The command line to be executed. The maximum length of this
	  string is 1024 characters. If lpApplicationName is NULL, the
	  module name portion of lpCommandLine is limited to MAX_PATH
	  characters.

	  The function can modify the contents of this
	  string. Therefore, this parameter cannot be a pointer to
	  read-only memory (such as a const variable or a literal
	  string). If this parameter is a constant string, the
	  function may cause an access violation.  The lpCommandLine
	  parameter can be NULL. In that case, the function uses the
	  string pointed to by lpApplicationName as the command line.

	  If both lpApplicationName and lpCommandLine are non-NULL,
	  *lpApplicationName specifies the module to execute, and
	  *lpCommandLine specifies the command line. The new process
	  can use GetCommandLine to retrieve the entire command
	  line. Console processes written in C can use the argc and
	  argv arguments to parse the command line. Because argv[0] is
	  the module name, C programmers generally repeat the module
	  name as the first token in the command line.

	  If lpApplicationName is NULL, the first white
	  space-delimited token of the command line specifies the
	  module name. If you are using a long file name that contains
	  a space, use quoted strings to indicate where the file name
	  ends and the arguments begin (see the explanation for the
	  lpApplicationName parameter). If the file name does not
	  contain an extension, .exe is appended. Therefore, if the
	  file name extension is .com, this parameter must include the
	  .com extension. If the file name ends in a period (.) with
	  no extension, or if the file name contains a path, .exe is
	  not appended. If the file name does not contain a directory
	  path, the system searches for the executable file in the
	  following sequence:
 
	  1. The directory from which the application loaded.  
	  2. The current directory for the parent process.  
	  3. The 32-bit Windows system directory. Use the GetSystemDirectory
	  function to get the path of this directory. 
	  4. The 16-bit Windows system directory. There is no function that obtains
	  the path of this directory, but it is searched.  
	  5. The Windows directory. Use the GetWindowsDirectory function to get the
	  path of this directory.  
	  6. The directories that are listed in the PATH environment 
	  variable. Note that this function does
	  not search the per-application path specified by the App
	  Paths registry key. To include this per-application path in
	  the search sequence, use the ShellExecute function.  

	  The system adds a null character to the command line string
	  to separate the file name from the arguments. This divides
	  the original string into two strings for internal
	  processing.
	</par>
        <par name="dwCreationFlags">
	  The flags that control how the process is created. The
	  CREATE_DEFAULT_ERROR_MODE, CREATE_NEW_CONSOLE, and
	  CREATE_NEW_PROCESS_GROUP flags are enabled by default.

	  This parameter also controls the new process's priority
	  class, which is used to determine the scheduling priorities
	  of the process's threads. For a list of values, see
	  GetPriorityClass. If none of the priority class flags is
	  specified, the priority class defaults to
	  NORMAL_PRIORITY_CLASS unless the priority class of the
	  creating process is IDLE_PRIORITY_CLASS or
	  BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process
	  receives the default priority class of the calling process.
	</par>
        <par name="lpEnvironment">
	  A pointer to an environment block for the new process. If
	  this parameter is NULL, the new process uses an environment
	  created from the profile of the user specified by
	  lpUsername.
	  
	  An environment block consists of a null-terminated block of
	  null-terminated strings. Each string is in the following
	  form:

	  name=value
	  
	  Because the equal sign (=) is used as a separator, it must
	  not be used in the name of an environment variable.  

	  An environment block can contain Unicode or ANSI
	  characters. If the environment block pointed to by
	  lpEnvironment contains Unicode characters, be sure that
	  dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. If this
	  parameter is NULL and the environment block of the parent
	  process contains Unicode characters, you must also ensure
	  that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT.

	  An ANSI environment block is terminated by two zero bytes:
	  one for the last string, one more to terminate the block. A
	  Unicode environment block is terminated by four zero bytes:
	  two for the last string and two more to terminate the block.

	  To retrieve a copy of the environment block for a specific
	  user, use the CreateEnvironmentBlock function.
	</par>
        <par name="lpCurrentDirectory">
	  The full path to the current directory for the process. The
	  string can also specify a UNC path.  If this parameter is
	  NULL, the new process will have the same current drive and
	  directory as the calling process. (This feature is provided
	  primarily for shells that need to start an application and
	  specify its initial drive and working directory.)
	</par>
        <par name="lpStartupInfo">
	  A pointer to a STARTUPINFO or STARTUPINFOEX structure.

	  If the lpDesktop member is NULL or an empty string, the new
	  process inherits the desktop and window station of its
	  parent process. The function adds permission for the
	  specified user account to the inherited window station and
	  desktop. Otherwise, if this member specifies a desktop, it
	  is the responsibility of the application to add permission
	  for the specified user account to the specified window
	  station and desktop, even for WinSta0\Default.  

	  Handles in STARTUPINFO or STARTUPINFOEX must be closed with
	  CloseHandle when they are no longer needed.  

	  Important: If the dwFlags member of the STARTUPINFO structure
	  specifies STARTF_USESTDHANDLES, the standard handle fields
	  are copied unchanged to the child process without
	  validation. The caller is responsible for ensuring that
	  these fields contain valid handle values. Incorrect values
	  can cause the child process to misbehave or crash. Use the
	  Application Verifier runtime verification tool to detect
	  invalid handles.
	</par>
        <par name="lpProcessInfo">
	  A pointer to a PROCESS_INFORMATION structure that receives
	  identification information for the new process, including a
	  handle to the process.  Handles in PROCESS_INFORMATION must
	  be closed with the CloseHandle function when they are no
	  longer needed.
	</par>
        <return>
          <rc cond="success">nonzero</rc>
          <rc cond="failure">zero</rc>
        </return>
      </apidoc>
    </documentation>
    <api adj="36" cc="stdcall" name="CreateProcessWithTokenW">
      <par loc="stack" name="hToken" io="r" nr="1">
        <type>HANDLE</type>
	<pre><deref-read/></pre>
	<roles>
	  <role rt="ioc:process" rn="handle:access token"/>
	</roles>
      </par>
      <par loc="stack" name="dwLogonFlags" io="r" roles="none" nr="2">
	<rep type="enum" name="logon_flags"/>
        <type>DWORD</type>
      </par>
      <par loc="stack" name="lpApplicationName" io="r" rep="hex" nr="3">
        <type>LPCWSTR</type>
	<pre><deref-read-null-nt/></pre>
	<roles>
	  <role rt="ioc:filesystem" rn="name:application"/>
	  <role rt="ioc:filesystem" rn="name:file"/>
	</roles>
      </par>
      <par loc="stack" name="lpCommandLine" io="rw" rep="hex" nr="4">
        <type>LPWSTR</type>
	<pre><deref-read-null-nt/></pre>
	<roles>
	  <role rt="ioc:process" rn="commandline"/>
	</roles>
      </par>
      <par loc="stack" name="dwCreationFlags" io="r" nr="5">
        <type>DWORD</type>
	<roles>
	  <role rt="enum:flags" rn="process_creation_flags"/>
	</roles>
      </par>
      <par loc="stack" name="lpEnvironment" io="r"  rep="hex" nr="6">
        <type><ptr>void</ptr></type>
	<pre><deref-read-null/></pre>
	<roles>
	  <role rt="ioc:process" rn="environment block"/>
	</roles>
      </par>
      <par loc="stack" name="lpCurrentDirectory" io="r" rep="hex" nr="7">
        <type>LPCWSTR</type>
	<pre><deref-read-null-nt/></pre>
	<roles>
	  <role rt="ioc:process" rn="name:current directory"/>
	  <role rt="ioc:filesystem" rn="name:file"/>
	</roles>
      </par>
      <par loc="stack" name="lpStartupInfo" io="r" rep="hex" nr="8">
        <type><ptr>STARTUPINFOW</ptr></type>
	<roles>
	  <role rt="ioc:process" rn="startup info"/>
	</roles>
      </par>
      <par loc="stack" name="lpProcessInfo" io="w" rep="hex" nr="9">
        <type><ptr>PROCESS_INFORMATION</ptr></type>
	<pre><deref-write/></pre>
	<sideeffects><block-write/></sideeffects>
	<roles>
	  <role rt="ioc:process" rn="infox:process info"/>
	</roles>
      </par>
      <returntype>BOOL</returntype>
    </api>
    <semantics>
      <io-actions>
        <io-action cat="system"
		   desc="creates a new process and its primary thread"/>
      </io-actions>
      <preconditions/>
      <postconditions>
        <notzero-zero/>
      </postconditions>
      <sideeffects/>
    </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2020, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-binary-analyzer>
