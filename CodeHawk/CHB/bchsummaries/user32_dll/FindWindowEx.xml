<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="01/21/2015 07:30:35"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="user32" name="FindWindowEx">
   <documentation>
    <desc>
      Retrieves a handle to a window whose class name and window name match 
      the specified strings. The function searches child windows, beginning 
      with the one following the specified child window. This function does 
      not perform a case-sensitive search. 
   </desc>
    <apidoc>
     <pt>
      <ll>HWND WINAPI FindWindowEx(</ll>
      <ld>_In_opt_  HWND hwndParent</ld>
      <ld>_In_opt_  HWND hwndChildAfter</ld>
      <ld>_In_opt_  LPCTSTR lpszClass</ld>
      <ld>_In_opt_  LPCTSTR lpszWindow</ld>
      <ll>)</ll>
     </pt>
     <return>
      <rc cond="success">notnull</rc>
      <rc cond="failure">null</rc>
     </return>
     <par name="hwndParent">
       A handle to the parent window whose child windows are to be searched.

       If hwndParent is NULL, the function uses the desktop window as the parent 
       window. The function searches among windows that are child windows of the desktop. 
     </par>
     <par name="hwndChildAfter">
       A handle to a child window. The search begins with the next child window 
       in the Z order. The child window must be a direct child window of hwndParent,
       not just a descendant window.

       If hwndChildAfter is NULL, the search begins with the first child window of hwndParent. 
     </par>
     <par name="lpszClass">
       The class name or a class atom created by a previous call to the RegisterClass
       or RegisterClassEx function. The atom must be placed in the low-order word of 
       lpszClass; the high-order word must be zero.
     </par>
     <par name="lpszWindow">
       The window name (the window&apos;s title). If this parameter is NULL, all window 
       names match. 
     </par>
    </apidoc>
   </documentation>
   <api adj="16" cc="stdcall" name="FindWindowEx">
     <returntype>BOOL</returntype>
     <par loc="stack" name="hwndParent" io="r" nr="1">
       <type>HWND</type>
       <pre><deref-read-null/></pre>
       <roles>
	 <role rt="ioc:process" rn="handle:window"/>
       </roles>
    </par>
    <par loc="stack" name="hwndChildAfter" io="r" nr="2">
      <type>HWND</type>
      <pre><deref-read-null/></pre>
      <roles>
	<role rt="ioc:process" rn="handle:window"/>
      </roles>
    </par>
    <par loc="stack" name="lpszClass" io="r" nr="3" rep="hex">
      <type>LPCTSTR</type>
      <pre><deref-read-null-nt/></pre>
      <roles>
	<role rt="ioc:process" rn="name:window class"/>
      </roles>
    </par>
    <par loc="stack" name="lpszWindow" io="r" nr="4" rep="hex">
      <type>LPCTSTR</type>
      <pre><deref-read-null-nt/></pre>
      <roles>
	<role rt="ioc:process" rn="name:window"/>
      </roles>
    </par>
   </api>
   <semantics>
     <io-actions>
       <io-action cat="system"
		  desc="retrieves a handle to a window by class and window name"/>
     </io-actions>
    <preconditions/>
    <postconditions>
     <notnull-null/>
    </postconditions>
    <sideeffects/>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
