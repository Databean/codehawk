<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <reference href="http://msdn.microsoft.com/"/>
  <header date="09/07/2015 01:44:59"/>
  <libfun lib="user32" name="CharToOemBuff">
   <documentation>
    <desc>
      Translates a specified number of characters in a string into the OEM-defined 
      character set
    </desc>
    <apidoc>
     <pt>
      <ll>BOOL WINAPI CharToOemBuff(</ll>
      <ld>_In_  LPCTSTR lpszSrc</ld>
      <ld>_Out_ LPSTR   lpszDst</ld>
      <ld>_In_  DWORD   cchDstLength</ld>
      <ll>)</ll>
     </pt>
     <par name="lpszSrc">The null-terminated string to be translated</par>
     <par name="lpszDst">
       The buffer for the translated string. If the CharToOemBuff function is 
       being used as an ANSI function, the string can be translated in place by 
       setting the lpszDst parameter to the same address as the lpszSrc parameter.
       This cannot be done if CharToOemBuff is being used as a wide-character
       function.
     </par>
     <par name="cchDstLength">
       The number of characters to translate in the string identified by the 
       lpszSrc parameter
     </par>
     <return>
      <rc cond="success">nonzero</rc>
      <rc cond="failure">zero</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="12" cc="stdcall" name="CharToOemBuff">
    <par loc="stack" name="lpszSrc" io="r" rep="hex" nr="1">
     <type>LPCTSTR</type>
     <pre><deref-read-nt/></pre>
     <roles>
        <role rt="ioc:memops" rn="src-string:convert"/>
     </roles>
    </par>
    <par loc="stack" name="lpszDst" io="w" rep="hex" nr="2">
     <type>LPTSTR</type>
     <roles>
        <role rt="ioc:memops" rn="dst-string:convert"/>
     </roles>
    </par>
    <par loc="stack" name="cchDstLength" io="r" nr="3">
     <type>DWORD</type>
     <roles>
        <role rt="size:buffersize" rn="CharToOemBuff"/>
     </roles>
    </par>
    <returntype>BOOL</returntype>
   </api>
   <semantics>
    <io-actions>
        <io-action cat="memops" desc="converts a string to the oem character set"/>
    </io-actions>
    <preconditions>
     <pre>
	<math>
	  <apply>
	    <deref-write/>
	    <type>TCHAR</type>
	    <ci>lpszSrc</ci>
	    <apply><indexsize/><ci>cchDstLength</ci></apply>
	  </apply>
	</math>
      </pre>
     <pre>
	<math>
	  <apply>
	    <deref-write/>
	    <type>TCHAR</type>
	    <ci>lpszDst</ci>
	    <apply><indexsize/><ci>cchDstLength</ci></apply>
	  </apply>
	</math>
      </pre>
    </preconditions>
    <postconditions/>
    <sideeffects>
      <sideeffect>
	<math>
	  <apply>
	    <block-write/>
	    <type>TCHAR</type>
	    <ci>lpszDst</ci>
	    <apply><indexsize/><ci>cchDstLength</ci></apply>
	  </apply>
	</math>
      </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
