<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="08/05/2013 10:30:10"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="kernel32" name="LCMapString">
   <documentation>
    <desc>
      for a locale specified by identifier, maps one input character string to another
      using a specified transformation, or generates a sort key for the input string
    </desc>
    <apidoc>
     <pt>
      <ll>int LCMapString (</ll>
      <ld>__in  LCID Locale,</ld>
      <ld>__in  DWORD dwMapFlags,</ld>
      <ld>__in  LPCTSTR lpSrcStr,</ld>
      <ld>__in  int cchSrc,</ld>
      <ld>__out LPTSTR lpDestStr,</ld>
      <ld>__in  in cchDest</ld>
      <ll>)</ll>
     </pt>
     <par name="Locale">locale identifier</par>
     <par name="dwMapFlags">flags specifying the type of transformation to use</par>
     <par name="lpSrcStr">pointer to a source string</par>
     <par name="cchSrc">
       size, in characters, of the source string; can be negative if
       the string is null-terminated
     </par>
     <par name="lpDestStr">
       pointer to a buffer in which this function retrieves the mapped string or a sort key
     </par>
     <par name="cchDest">
       size, in characters, of the destination string; if cchDest is set to 0,
       the function returns the required buffer size
     </par>
     <return>
      <rc cond="success">
	number of characters or bytes in the translated string or sort key, including
	a terminating null character
      </rc>
      <rc cond="failure">zero</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="24" cc="stdcall" name="LCMapString">
    <returntype>int</returntype>
    <par loc="stack" name="Locale" nr="1">
     <type>LCID</type>
     <roles>
        <role rt="ioc:system" rn="id:locale"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="dwMapFlags" roles="none" nr="2">
      <type>DWORD</type>
    </par>
    <par loc="stack" io="r" name="lpSrcStr" nr="3">
      <type>LPCTSTR</type>
     <pre><deref-read-nt/></pre>
      <roles>
         <role rt="ioc:memops" rn="src-string:convert"/>
         <role rt="rep:hex" rn="src-string"/>
      </roles>
    </par>
    <par loc="stack" io="r" name="cchSrc" nr="4">
     <type>int</type>
     <roles>
        <role rt="size:buffersize" rn="LCMapString"/>
     </roles>
    </par>
    <par loc="stack" io="w" name="lpDestStr" nr="5">
      <type>LPTSTR</type>
      <roles>
         <role rt="ioc:memops" rn="dst-string:convert"/>
         <role rt="rep:hex" rn="dst-string"/>
      </roles>
    </par>
    <par loc="stack" name="cchDest" nr="6">
     <type>int</type>
     <pre><non-negative/></pre>
     <roles>
        <role rt="size:buffersize" rn="LCMapString"/>
     </roles>
    </par>
   </api>
   <semantics>
    <io-actions>
       <io-action cat="process" desc="transforms code"/>
    </io-actions>
    <preconditions>
      <!-- if cchSrc is nonnegative: ensure src string has size cchSrc -->
      <pre>
	<math>
	  <apply>
	    <implies/>
	    <apply><geq/><ci>cchSrc</ci><cn>0</cn></apply>
	    <apply>
	      <deref-read/>
	      <type>TCHAR</type>
	      <ci>lpSrcStr</ci>
	      <apply><indexsize/><ci>cchSrc</ci></apply>
	    </apply>
	  </apply>
	</math>
      </pre>
      <!-- if cchSrc is negative: ensure src string is null terminated -->
      <pre>
	<math>
	  <apply>
	    <implies/>
	    <apply><lt/><ci>cchSrc</ci><cn>0</cn></apply>
	    <apply>
	      <deref-read/>
	      <type>TCHAR</type>
	      <ci>lpSrcStr</ci>
	      <apply>
		<indexsize/>
		<apply>
		  <null-terminator-pos/>
		  <ci>lpSrcStr</ci>
		</apply>
	      </apply>
	    </apply>
	  </apply>
	</math>
      </pre>
      <!-- if cchDest is positive: ensure dest string buffer is large enough -->
      <pre>
	<math>
	  <apply>
	    <deref-write/>
	    <type>TCHAR</type>
	    <ci>lpDestStr</ci>
	    <apply><indexsize/><ci>cchDest</ci></apply>
	  </apply>
	</math>
      </pre>
      <!-- if cchDest is zero: nothing gets written -->
    </preconditions>
    <postconditions>
      <positive-zero/>
    </postconditions>
    <sideeffects>
     <sideeffect>
      <math>
	<apply>
	  <implies/>
	  <pre><apply><geq/><ci>cchDest</ci><cn>0</cn></apply></pre>
	  <apply>
	    <block-write/>
	    <type>TCHAR</type>
	    <ci>lpDestStr</ci>
	    <apply><indexsize/><ci>cchDest</ci></apply>
	  </apply>
	</apply>
      </math>
     </sideeffect>
    </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2015, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
