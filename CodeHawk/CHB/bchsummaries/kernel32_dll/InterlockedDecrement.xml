<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="08/05/2013 10:30:10"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="kernel32" name="InterlockedDecrement">
   <documentation>
    <desc>
      decrements the value of the specified 32 bit variable as an atomic operation
    </desc>
    <apidoc>
     <pt>
      <ll>LONG __cdecl InterlockedDecrement (</ll>
      <ld>__inout LONG volatile *Addend</ld>
      <ll>)</ll>
     </pt>
     <par name="Addend">pointer to the value to be decremented</par>
     <return>resulting decremented value</return>
    </apidoc>
   </documentation>
   <api adj="4" cc="stdcall" name="InterlockedDecrement">
    <returntype>LONG</returntype>
    <par loc="stack" name="Addend" nr="1" rep="hex">
      <type><ptr>LONG</ptr></type>
     <pre><deref-read/></pre>
     <sideeffects><block-write/></sideeffects>
     <roles>
       <role rt="ioc:synchronization" rn="synchronized variable"/>
     </roles>
    </par>
   </api>
   <semantics>
     <io-actions>
       <io-action cat="synchronization"
		  desc="decrements a value as an atomic operation"/>
     </io-actions>
    <preconditions/>
    <postconditions>
     <post>
      <math>
       <apply>
        <eq/>
        <return-value/>
        <apply>
         <minus/>
         <apply>
          <addressed-value/>
          <ci>Addend</ci>
	  <cn>0</cn>
         </apply>
         <cn>1</cn>
        </apply>
       </apply>
      </math>
     </post>
    </postconditions>
    <sideeffects/>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2015, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
