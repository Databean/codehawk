<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="08/05/2013 10:30:10"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="kernel32" name="CreateThread">
   <documentation>
    <desc>
      creates a thread to execute within the virtual address spaces of the calling
      process
    </desc>
    <apidoc>
     <pt>
      <ll>HANDLE WINAPI CreateThread (</ll>
      <ld>__in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,</ld>
      <ld>__in      SIZE_T dwStackSize,</ld>
      <ld>__in      LPTHREAD_START_ROUTINE lpStartAddress,</ld>
      <ld>__in_opt  LPVOID lpParameter,</ld>
      <ld>__in      DWORD dwCreationFlags</ld>
      <ld>__out_opt LPDWORD lpThreadId</ld>
      <ll>)</ll>
     </pt>
     <par name="lpThreadAttributes">
       pointer to a SECURITY_ATTRIBUTES structure; can be NULL
     </par>
     <par name="dwStackSize">initial size of the stack, in bytes</par>
     <par name="lpStartAddress">
       pointer to the application-defined function to be executed; cannot be NULL
     </par>
     <par name="lpParameter">
       pointer to a variable to be passed to the thread; can be NULL
     </par>
     <par name="dwCreationFlags">flags that control the creation</par>
     <par name="lpThreadId">
       pointer to a variable that receives the thread identifier; can be NULL
     </par>
     <return>
      <rc cond="success">handle to the new thread</rc>
      <rc cond="failure">NULL</rc>
     </return>
    </apidoc>
   </documentation>
   <api adj="24" cc="stdcall" name="CreateThread">
    <returntype>HANDLE</returntype>
    <par loc="stack" name="lpThreadAttributes" io="r" roles="none" nr="1">
      <type><ptr>SECURITY_ATTRIBUTES</ptr></type>
      <pre><deref-read-null/></pre>
    </par>
    <par loc="stack" name="dwStackSize" io="r" nr="2">
      <type>SIZE_T</type>
      <roles>
	<role rt="ioc:process" rn="stack size"/>
	<role rt="size:stacksize" rn="CreateThread"/>
      </roles>
    </par>
    <par loc="stack" name="lpStartAddress" io="r" nr="3" rep="hex">
      <type>THREAD_START_ROUTINE</type>
      <pre><deref-read/><function-pointer/></pre>
      <roles>
	<role rt="ioc:process" rn="callbackf:thread"/>
      </roles>
    </par>
    <par loc="stack" name="lpParameter" io="r" nr="4" rep="hex">
      <type>LPVOID</type>
     <pre><deref-read-null/></pre>
     <roles>
       <role rt="ioc:process" rn="callbackp:thread"/>
     </roles>
    </par>
    <par loc="stack" io="r" name="dwCreationFlags" roles="none" nr="5">
      <type>DWORD</type>
    </par>
    <par loc="stack" name="lpThreadId" io="w" nr="6" rep="hex">
      <type><ptr>DWORD</ptr></type>
      <pre><deref-write-null/></pre>
      <roles>
	<role rt="ioc:process" rn="ref:thread id"/>
     </roles>
     <sideeffects><block-write-null/></sideeffects>
    </par>
   </api>
   <semantics>
     <io-actions>
       <io-action cat="process" desc="creates a thread"/>
     </io-actions>
    <preconditions/>
    <postconditions>
      <notnull-null/>
    </postconditions>
   <sideeffects>
     <sideeffect>
       <math>
	 <apply>
	   <starts-thread/>
	   <ci>lpStartAddress</ci>
	   <ci>lpParameter</ci>
	 </apply>
       </math>
     </sideeffect>
   </sideeffects>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
