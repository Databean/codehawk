<?xml version="1.0" encoding="UTF-8"?>
 <codehawk-binary-analyzer>
  <header date="01/20/2015 04:40:20"/>
  <reference href="http://msdn.microsoft.com/"/>
  <libfun lib="kernel32" name="VirtualFreeEx">
   <documentation>
    <desc>
      Releases, decommits, or releases and decommits a region of pages within 
      the virtual address space of the calling process.
    </desc>
    <apidoc>
     <pt>
      <ll>BOOL WINAPI VirtualFreeEx(</ll>
      <ld>_In_  HANDLE hProcess</ld>
      <ld>_In_  LPVOID lpAddress</ld>
      <ld>_In_  SIZE_T dwSize</ld>
      <ld>_In_  DWORD dwFreeType</ld>
      <ll>)</ll>
     </pt>
     <return>
      <rc cond="success">notzero</rc>
      <rc cond="failure">zero</rc>
     </return>
     <par name="hProcess">
       A handle to a process. The function frees memory within the virtual
       address space of the process.
       The handle must have the PROCESS_VM_OPERATION access right.
     </par>
     <par name="lpAddress">
       A pointer to the base address of the region of pages to be freed.
       
       If the dwFreeType parameter is MEM_RELEASE, this parameter must be 
       the base address returned by the VirtualAlloc function when the 
       region of pages is reserved.
     </par>
     <par name="dwSize">
       The size of the region of memory to be freed, in bytes.

       If the dwFreeType parameter is MEM_RELEASE, this parameter must be
       0 (zero). The function frees the entire region that is reserved 
       in the initial allocation call to VirtualAlloc.

       If the dwFreeType parameter is MEM_DECOMMIT, the function decommits
       all memory pages that contain one or more bytes in the range from
       the lpAddress parameter to (lpAddress+dwSize).
     </par>
     <par name="dwFreeType">The type of free operation.</par>
    </apidoc>
   </documentation>
   <api adj="16" cc="stdcall" name="VirtualFreeEx">
     <returntype>BOOL</returntype>
    <par loc="stack" io="r" name="hProcess" nr="1">
     <type>HANDLE</type>
     <roles>
      <role rt="ioc:process" rn="handle:process" />
     </roles>
      <pre><deref-read/></pre>
    </par>
    <par loc="stack" io="r" name="lpAddress" nr="2" rep="hex">
     <roles>
      <role rt="ioc:memops" rn="address:memory" />
     </roles>
     <type><ptr>VOID</ptr></type>
     <pre><not-null/><allocation-base/></pre>
     <sideeffects><invalidates/></sideeffects>
    </par>
    <par loc="stack" io="r" name="dwSize" nr="3">
      <type>SIZE_T</type>
     <roles>
      <role rt="size:memory" rn="VirtualFree" />
     </roles>
    </par>
    <par loc="stack" io="r" name="dwFreeType" roles="none" nr="4">
      <rep type="enum" name="memfree_constants"/>
      <type>DWORD</type>
     <pre><enum-value name="memfree_constants"/></pre>
    </par>
   </api>
   <semantics>
     <io-actions>
       <io-action cat="memops"
		  desc="releases and/or decommits a region of pages"/>
     </io-actions>
    <preconditions/>
    <postconditions>
     <nonzero-zero/>
    </postconditions>
    <sideeffects/>
   </semantics>
  </libfun>
  <copyright-notice>Copyright 2012-2016, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
 </codehawk-binary-analyzer>
